package com.bnpparibas.processing.cli;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

public class Config  {

    @JsonProperty
    public String nom;

    @JsonProperty
    public String prenom;

    @JsonProperty
    public int age;

    public static Config parseFile(String file)
    {
        final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
        try
        {
            final String yamlSource = new String(Files.readAllBytes(Paths.get(file)), StandardCharsets.UTF_8);

            return mapper.readValue(yamlSource, Config.class);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return null;
    }


}



<dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-yaml</artifactId>
            <version>2.8.3</version>
        </dependency>





 def getLastModifiedFile (dir: String):String={
        val repertoire = new File(dir)
        if (repertoire.exists && repertoire.isDirectory) {
           val listFiles =  repertoire.listFiles.filter(_.isFile).toList
           val lastFile:File = listFiles.maxBy(_.lastModified)
           if (lastFile.canRead) {
             lastFile.getName
           }else{
             "can not read file"
           }
        }else{
          "path to folder not exists "
        }
    }











